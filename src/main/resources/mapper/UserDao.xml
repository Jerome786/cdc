<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cdc.train.dao.UserDao">

    <resultMap type="com.cdc.train.entity.User" id="UserMap">
        <result property="userId" column="user_id" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="openId" column="open_id" jdbcType="VARCHAR"/>
        <result property="nickname" column="nickname" jdbcType="VARCHAR"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="VARCHAR"/>
        <result property="avatar" column="avatar" jdbcType="VARCHAR"/>
        <result property="deptId" column="dept_id" jdbcType="VARCHAR" />
    </resultMap>

    <resultMap id="ResultDTO" type="com.cdc.train.entity.dto.UserDTO" extends="UserMap">
        <result property="roleId" column="roleId" jdbcType="VARCHAR" />
        <result property="roleName" column="roleName" jdbcType="VARCHAR" />
        <result property="realName" column="realName" jdbcType="VARCHAR" />
        <result property="gender" column="gender" jdbcType="VARCHAR" />
        <result property="deptName" column="deptName" jdbcType="VARCHAR" />
    </resultMap>
    <!--通过用户id查询单个-->
    <select id="queryById" resultMap="ResultDTO" parameterType="String">
        select
          u.user_id, create_time, update_time, last_login_time, nickname, phone, email, status, avatar, dept_id,ui.name as realName,
          ui.gender,r.name as roleName
        from cdc.user u
        left join user_info ui on u.user_id = ui.user_id
        left join user_role ur on u.user_id = ur.user_id
        left join role r on ur.role_id = r.role_id
        where u.user_id = #{userId}
    </select>

    <!--根据openId和nickname查询单个用户-->
    <select id="queryByUser" resultMap="UserMap" parameterType="com.cdc.train.entity.User">
        SELECT
        user_id, create_time, update_time, last_login_time, nickname, phone, email, status
        FROM
        cdc.user
        WHERE
        user_id = #{user.userId}
        AND
        nickname = #{user.nickname}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="UserMap">
        select
          user_id, create_time, update_time, last_login_time, nickname, phone, email, status, avatar, dept_id
        from cdc.user
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="ResultDTO">
        select
        u.user_id, create_time, nickname, avatar, status,ui.name as realName,u.email,
        ui.gender as gender,d.dept_name as deptName,u.phone
        from cdc.user u
        left join user_info ui on u.user_id = ui.user_id
        left join user_role ur on u.user_id = ur.user_id
         LEFT JOIN department d on u.dept_id = d.dept_id
        where ur.role_id = "2" AND status = 0
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="userId" useGeneratedKeys="true">
        insert into cdc.user(user_id,create_time, nickname, phone, email, avatar, dept_id,status)
        values (#{userId}, #{createTime},#{nickname}, #{phone}, #{email}, #{avatar}, #{deptId},#{status})
    </insert>



    <!--通过主键修改状态-->
    <update id="update">
        update cdc.user
           <set>
           status = 0
               <if test='deptId != null and deptId != "" '>
                   ,dept_id= #{deptId}
               </if>
            </set>
        where user_id = #{userId} and status = 1
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from cdc.user where user_id = #{userId}
    </delete>

</mapper>